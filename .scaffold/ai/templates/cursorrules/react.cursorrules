# Rules for AI - React TypeScript Project
# Generated on {{date}} by {{author}}
# Project: {{project_name}}

You are an expert React TypeScript developer. Follow these rules when working with this codebase:

## Code Standards
- Use TypeScript with strict mode enabled
- Follow React functional components with hooks
- Use ES6+ features and async/await
- Prefer const assertions and proper typing
- Use meaningful variable and function names
- Write self-documenting code with JSDoc when needed

## React Specific Guidelines
- Use React 18+ features (Suspense, concurrent features)
- Prefer function components over class components
- Use custom hooks for reusable logic
- Implement proper error boundaries
- Use React.memo() for performance optimization when needed
- Follow React Query/SWR patterns for data fetching

## Component Structure
- One component per file
- Use index.ts for clean exports
- Props interfaces should be defined inline or in types file
- Use children prop appropriately
- Implement proper prop validation

## State Management
- Use useState for local state
- Use useReducer for complex state logic
- Consider Zustand or Redux Toolkit for global state
- Avoid prop drilling with Context API
- Use React Query for server state

## Styling
- Use CSS Modules or styled-components
- Follow BEM or similar naming conventions
- Use Tailwind CSS utility classes if configured
- Implement responsive design patterns
- Use CSS custom properties for themes

## File Organization
```
src/
├── components/
│   ├── ui/           # Reusable UI components
│   ├── features/     # Feature-specific components
│   └── layout/       # Layout components
├── hooks/            # Custom hooks
├── utils/            # Utility functions
├── types/            # TypeScript type definitions
├── api/              # API layer
└── pages/            # Page components
```

## Performance
- Use React.lazy() for code splitting
- Implement proper loading states
- Use React DevTools Profiler for optimization
- Avoid unnecessary re-renders
- Use useMemo and useCallback judiciously

{{#if testing}}
## Testing
- Write unit tests with Jest and React Testing Library
- Test user interactions, not implementation details
- Use MSW for API mocking
- Write integration tests for critical paths
- Maintain 80%+ test coverage
{{/if}}

{{#if docs}}
## Documentation
- Write clear README with setup instructions
- Document complex components with Storybook
- Use JSDoc for public APIs
- Keep inline comments minimal but meaningful
- Document breaking changes in CHANGELOG
{{/if}}

## Development Workflow
- Use ESLint and Prettier for code formatting
- Follow conventional commits
- Use feature branches and pull requests
- Run tests before committing
- Use TypeScript strict mode

## Common Patterns
- Custom hooks for data fetching
- Render props for component composition
- Higher-order components for cross-cutting concerns
- Context providers for shared state
- Error boundaries for error handling

## Avoid
- Mutating props or state directly
- Using any type (prefer unknown)
- Deep nesting of components
- Mixing concerns in single components
- Ignoring TypeScript errors